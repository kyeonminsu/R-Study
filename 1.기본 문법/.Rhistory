vcxvcxvcxvc
library(soilDB)
install.packages("RODBC", dep=TRUE)
install.packages("aqp", dep = TRUE)
install.packages("soilDB", dep=TRUE)
print("hello")
# Load from the the loakercreek dataset
data("loafercreek")
# 일반화 된 지평선 지정 구성
n <- c("A",
"BAt",
"Bt1",
"Bt2",
"Cr",
"R")
# REGEX 규칙
p <- c("A",
"BA|AB",
"Bt|Bw",
"Bt3|Bt4|2B|C",
"Cr",
"R")
source('C:/Users/kyeon/OneDrive/바탕 화면/빅데이터/R/EDA/EDA.R')
View(loafercreek)
install.packages("ggplot2")
library(ggplot2)
qplot(x)
install.packages("ggplot2")
library(ggplot2)
x<-c("a","b","c","d")
x
qplot(x)
qplot(data =mpg, x=hwy)
qplot(data =mpg, x=cty, y = hwy)
eng <- c(90,80,70,60)
#library(ggplot2)
# x<-c("a","b","c","d")
# x
# qplot(x)
#qplot(data =mpg, x=cty, y = hwy)
eng <- c(90,80,70,60)
math <- c(50,60,70,80)
math <- c(50,60,70,80)
df_mid
df_mid <- data.frame(eng,math)
df_mid
df_mid <- data.frame(eng,math,class)
class <- c(1,1,2,2)
df_mid <- data.frame(eng,math,class)
df_mid
mean(df_mid$eng)
mean(df_mid$math)
# eng <- c(90,80,70,60)
# math <- c(50,60,70,80)
# class <- c(1,1,2,2)
# df_mid <- data.frame(eng,math,class)
# df_mid
#
# mean(df_mid$eng)
# mean(df_mid$math)
install.packages("readx1")
library(readxl)
df_exam <- read_excel("excel_exam.xlsx")
df_exam <- read_excel("excel_exam.xlsx")
df_exam <- read_excel("excel_exam.xlsx")
df_exam <- read_excel('excel_exam.xlsx')
df_exam <- read_excel("C:\Users\kyeon\OneDrive\바탕 화면\빅데이터\R\EDA\excel_exam.xlsx")
df_exam <- read_excel("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//excel_exam.xlsx")
df_exam
mean(df_exam$english)
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
head(mpg, 10)
View()
View(mgp)
View(mpg)
View(mpg)
dim(mpg)
str(mpg)
summary(mpg)
install.packages(dplyr)
install.packages(dpiyr)
install.packages(dplyr)
library(dplyr)
install.packages(dplyr)
library(dplyr)
df_exam <- read_excel("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//excel_exam.xlsx")
df_exam
df_exam%>%filter(class==4)
df_exam%>%filter(class %in% c(1,2,5))
library(readxl)
library(dplyr)
y_data <- read_excel("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//excel_exam.xlsx")
y_data
y_data%>% select(class)
y_data
y_data%>% select(class, math)
y_data%>% select(-class, -math)
y_data%>% filter(class==1) %>%select(math)
y_data%>%select(math)%>%head
#데이터 정렬 https://www.data.go.kr/
library(readxl)
x_data <- read_excel("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//excel_exam.xlsx")
x_data%>%arrange(math)
x_data%>%arrange(desc(math))
#파생변수 추가하기
x_data%>%mutate(math_avg=math/20)
#파생변수 추가하기
x_data%>%mutate(math_1=math+20)
#파생변수 추가하기
x_data%>%mutate(ifelse(class>4,math+20))
#파생변수 추가하기
x_data%>%mutate(math_1=ifelse(class>4,math+20))
#파생변수 추가하기
x_data%>%mutate(math_1 = ifelse(class>=4,20))
#파생변수 추가하기
x_data%>%mutate(math_1 = ifelse(class>=4,"yes"))
#파생변수 추가하기
x_data%>%mutate(math_1 = ifelse(class>=4,"yes"))%>%
#파생변수 추가하기
x_data%>%mutate(math_1 = ifelse(class>=4,"yes"))%>%
x_data
#파생변수 추가하기
x_data%>%mutate(math_1 = ifelse(class>=4,"yes"))%>%
x_data
#파생변수 추가하기
x_data%>%mutate(math_1 = ifelse(class>=4,"yes"))%>%head()
x_data
#파생변수 추가하기
x_data%>%mutate(math_1 = ifelse(class>=4,"yes","NO"))
library(ggplot2)
library(dplyr)
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv")
crime.head()
head(crime)
str(crime)
crime[c(4,5,6,7), "pr_sum"] <- NA
crime
head(crime)
crime[c(4, 5, 6, 7), "pr_sum"] <- NA
head(crime)
table(is.na(crime$pr_sum))
str(crime)
crime_clean <- crime%>%filter(!is.na(pr_sum))
table(is.na(crime_clean$pr_sum))
crime_clean
#텍스트 마이닝
install.packages("rJava")
#텍스트 마이닝
#install.packages("rJava")
install.packages("memoise")
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
install.packages("KoNLP")
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
library(KoNLP)
install.packages("KoNLP")
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
library(KoNLP)
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
library(KoNLP)
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
library(KoNLP)
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
library(KoNLP)
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
library(rJava)
library(KoNLP)
Sys.getenv()
library(KoNLP)
library(memoise)
library(KoNLP)
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
library(KoNLP)
useNIADic()
useNIADic()
install.packages("NIADic")
useNIADic()
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
#install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP",
upgrade = "never",
INSTALL_opts=c("--no-multiarch"))
useNIADic()
install.packages("multilinguer")
useNIADic()
remotes::install_github("haven-jeon/KoNLP",
upgrade = "never",
INSTALL_opts=c("--no-multiarch"))
library(memoise)
library(KoNLP)
useNIADic()
useNIADic()
useNIADic()
library(rJava)
library(memoise)
library(KoNLP)
useNIADic()
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools', 'glue'), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools", "glue"), type = "binary")
library(KoNLP)
useNIADic()
useNIADic()
library(NIADic)
useNIADic()
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools', 'glue','woorimalsam'), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools", "glue", "woorimalsam"), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools", "glue", "woorimalsam"), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools", "glue", "woorimalsam"), type = "binary")
#텍스트 마이닝
#install.packages("rJava")
#install.packages("memoise")
#install.packages("KoNLP")
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools', 'glue', 'woorimalsam'), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools", "glue", "woorimalsam"), type = "binary")
buildDictionary(ext_dic = "woorimalsam")
remotes::install_github("haven-jeon/KoNLP",
upgrade = "never",
INSTALL_opts=c("--no-multiarch"))
useNIADic()
library(rJava)
library(memoise)
library(KoNLP)
useNIADic()
buildDictionary(ext_dic = "woorimalsam", category_dic_nms = "",
user_dic = data.frame(), replace_usr_dic = F, verbose = F)
install.packages("woorimalsam")
useNIADic()
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_271')
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_271')
useNIADic()
buildDictionary(ext_dic = "woorimalsam")
buildDictionary(ext_dic = "woorimalsam")
txt<-readLines("ssong.txt")
txt<-readLines("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//ssong.txt")
txt<-readLines("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//song.txt")
txt<-read.table("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//song.txt")
# library(ggplot2)
# library(dplyr)
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv")
txt<-read.table("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//song.txt")
# library(ggplot2)
# library(dplyr)
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv")
#?
library(readxl)
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv")
df_exam <- read_excel("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//excel_exam.xlsx")
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv")
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv/")
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv//")
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv")
crime <- read.csv("crime.csv")
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv")
setwd("C:/Users/kyeon/OneDrive/바탕 화면/빅데이터/R/0.기본 문법")
txt<-read.table("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//song.txt")
crime <- read.csv("C://Users//kyeon//OneDrive//바탕 화면//빅데이터//R//EDA//기본 문법//crime.csv")
