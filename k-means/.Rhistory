cars
a<-1
a
dd
dsf
df
a<-3
a
a
a<-3
a
print("-----------------")
5->b
b
a<-3
a
5->b
b
c<-4.5
c
var1<-c(1,2,3,4,5)
var1
var2<-c(1:5)
var2
var3<-seq(1,2,3,4,5)
var3
var1<-c(1,2,3,4,5)
var1
var2<-c(1:5)
var2
var3<-seq(1:5)
var3
var1<-c(1,2,3,4,5)
var1
var2<-c(1:5)
var2
var3<-seq(1:5)
var3
data <- scan()
data
str1<-"a"
str1
str2<-"Hello! R"
str2
str3<-c("Hello", "R",  "World,",  "!")
var1 <- 100
var2 <- 100L
var3 <- "Hello"
var4 <- TRUE
var5 <- 4 - 3i
var6 <- NULL
var7 <- sqrt(-3)
mode(var1)
mode(var2)
mode(var3)
mode(var4)
mode(var5)
mode(var6)
mode(var7)
is.numeric(var1)
is.numeric(var2)
is.double(var1)
is.integer(var1)
is.integer(var2)
is.character(var3)
is.logical(var1)
is.null(var6)
is.na(var7)
is.numeric(var1)
is.numeric(var2)
is.double(var1)
is.integer(var1)
is.integer(var2)
is.character(var3)
is.logical(var1)
is.null(var6)
is.na(var7)
var1 <- c(100,TRUE,3.1415)
var1
var2 <- c(100,TRUE,3.1415,"Hello")
var2
var3 <- c(100,FALSE,3-4i)
var3
var4 <- c(100,FALSE,3-4i,"안녕!!")
var4
installed.packages()
install.packages("ggplot")
> install.packages("ggplot2")
> install.packages("ggplot2")
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
# 문자로 구성된 vector 생성
x <- c("a","b","c","a","b","a")
# qplot()을 이용하여 빈도 막대 그래프를 그려보자
qplot(x)
# R의 도움말 기능을 이용해보자
help(mean)
# 기본 함수의 파라미터를 확인해보자
args(max)
# 기본 함수의 사용예제
example(mean)
# qplot 함수의 사용예제
example(qplot)
help(mean)
help()
# 기본 함수의 파라미터를 확인해보자
args(max)
# 기본 함수의 파라미터를 확인해보자
args(mean)
# 기본 함수의 파라미터를 확인해보자
args(name)
# 기본 함수의 파라미터를 확인해보자
args(matrix)
# 기본 함수의 파라미터를 확인해보자
args(matrix)
# 기본 함수의 사용예제
example(mean)
# 기본 함수의 사용예제
example(mean)
X<-c(2,3,4)
X
mean(X)
max(X)
min(X)
# scalar 생성
var1 <- c(100)   # scalar
var1
library(KoNLP)
useNIADic()
useSystemDic() # 시스템 사전 설정
useSejongDic() # 세종 사전 설정
buildDictionary(ext_dic = c('woorimalsam'), category_dic_nms=c('political'),
user_dic=data.frame(term='전작권', tag='ncn'))
library(NIADic)
package_version(R.version)
install.packages('woorimalsam')
install.packages('sejong')
install.packages('Sejong')
install.packages("Sejong")
#useSystemDic() # 시스템 사전 설정
useSejongDic() # 세종 사전 설정
library(KoNLP)
#install.packages('Sejong')
library(KoNLP)
useNIADic()
#useSystemDic() # 시스템 사전 설정
useSejongDic() # 세종 사전 설정
useSystemDic() # 시스템 사전 설정
install.packages("installr")
library(installr)
updateR()
# vector 생성 - c()
var1 = c(10,30,77,100)
var1
var2 = c(89,56,33)
var2
var3 = c(TRUE,FALSE,FALSE,TRUE)
var3
var4 = c("홍길동", "강감찬", "유관순")
var4
var5 = c("홍길동", 100, TRUE, 3.141592)
var5
var6 = c(var1, var2)
var6
var7 = c(var1, var4)
var7
var7 = c(var1, var4)
# vector 생성 - c()
var1 = c(10,30,77,100)
var1
var2 = c(89,56,33)
var2
var3 = c(TRUE,FALSE,FALSE,TRUE)
var3
var4 = c("홍길동", "강감찬", "유관순")
var4
var5 = c("홍길동", 100, TRUE, 3.141592)
var5
var6 = c(var1, var2)
var6
var7 = c(var1, var4)
var7
var1 = seq(from=1, to=5, by=1)
var1
var2 = seq(from=0.5, to=10, by=1.5)
var2
var3 = seq(from=10, to=5, by=-2)
var3
var1 = rep(1:3, times=3) # times 생략 가능
var1                     # 1 2 3 1 2 3 1 2 3
var2 = rep(1:3, each=3)  # each는 각 원소가 반복할 횟수 지정
var2
var1 = rep(1:3, times=3) # times 생략 가능
var1                     # 1 2 3 1 2 3 1 2 3
var2 = rep(1:3, each=3)  # each는 각 원소가 반복할 횟수 지정
var2                     # 1 1 1 2 2 2 3 3 3
# vector간의 연산
var1 = 1:3
var2 = 4:6
var1                      # 1 2 3
var2                      # 4 5 6
var1 * 2                  # 2 4 6
var1 + 10                 # 11 12 13
var1 + var2               # 5 7 9
var3 = 1:6
var3
var1 + var3               # var1 : 1 2 3 1 2 3 (recycling rule)
# var3 : 1 2 3 4 5 6
# 2 4 6 5 7 9
var4 = 1:5
var4
var1 + var4               # var1 : 1 2 3 1 2 (recycling rule)
# var4 : 1 2 3 4 5
# 연산은 되지만 warning 발생
# 2 4 6 5 7
# matrix 생성
var1 = matrix(c(1:5))
var1
# nrow 속성을 이용해여 지정된 행을 가지는 matrix 생성
# 열 기준으로 데이터가 채워진다.
var2 = matrix(c(1:10), nrow=2)
var2
# nrow 속성 사용시 만약 행과 열의 수가 일치하지 않는 경우
var3 = matrix(c(1:13), nrow=3)
var3
# matrix 생성 시 행 우선으로 데이터를 생성하는 경우
var4 = matrix(c(1:10), nrow=2, byrow=T)
var4
# vector를 대상으로 rbind()는 행 묶음으로 matrix를 생성
# vector를 대상으로 cbind()는 열 묶음으로 matrix를 생성
var5 = c(1,2,3,4)
var6 = c(5,6,7,8)
mat1 = rbind(var5, var6)
mat1
mat2 = cbind(var5, var6)
mat2
# 데이터 타입과 데이터 구조 확인
mode(mat1)             # numeric
class(mat1)            # matrix
# matrix 생성
var1 = matrix(c(1:5))
var1
# nrow 속성을 이용해여 지정된 행을 가지는 matrix 생성
# 열 기준으로 데이터가 채워진다.
var2 = matrix(c(1:10), nrow=2)
var2
# nrow 속성 사용시 만약 행과 열의 수가 일치하지 않는 경우
var3 = matrix(c(1:13), nrow=3)
var3
# matrix 생성 시 행 우선으로 데이터를 생성하는 경우
var4 = matrix(c(1:10), nrow=2, byrow=T)
var4
# vector를 대상으로 rbind()는 행 묶음으로 matrix를 생성
# vector를 대상으로 cbind()는 열 묶음으로 matrix를 생성
var5 = c(1,2,3,4)
var6 = c(5,6,7,8)
mat1 = rbind(var5, var6)
mat1
mat2 = cbind(var5, var6)
mat2
# 데이터 타입과 데이터 구조 확인
mode(mat1)             # numeric
class(mat1)            # matrix
var1 = matrix(c(1:6), ncol=3)
var1
var2 = matrix(c(1,-1,2,-2,1,-1), ncol=3)
var2
var1*var2   # elementwise product(element단위의 곱연산)
t(var1)     # transpose matrix (전치행렬)
var3 = matrix(c(1,-1,2,-2,1,-1), ncol=2)
var3
var1 %*% var3   # matrix product (행렬곱)
# 역행렬 : matrix A가 nxn matrix일 때,
# 아래를 만족하는 nxn matrix B가 존재하면 B를 A의 역행렬이라 한다.
# AB = BA = I(단위행렬 E)
# 가우스 조던 소거법을 이용하여 계산.
var1 = matrix(c(1,2,3,3,0,1,5,4,2), ncol=3)
var1
solve(var1)     # matrix inversion (역행렬)
# factor 생성
var1 = c("A", "O", "AB", "B", "A", "O", "A")
var1
var1_factor = factor(var1)
var1_factor                   # factor이기 때문에
nlevels(var1_factor)          # factor의 level개수
# 4
levels(var1_factor)           # factor의 level 목록
# "A"  "AB"  "B"  "O"
is.factor(var1_factor)        # factor인지를 판단
ordered(var1)                 # 순서형 factor 생성
# level과 order 지정
# level에 지정이 안되면 NA로 처리
var1_factor = factor(var1,
levels = c("O","A","B"),
ordered = T)
var1_factor
var1_factor = factor(var1,
levels = c("O","A","B","AB"),
ordered = T)
var1_factor
levels(var1_factor) = c("A형","AB형","B형","O형")
levels(var1_factor)
var1_factor                  # 결과를 꼭 확인해보자
# factor 생성
var1 = c("A", "O", "AB", "B", "A", "O", "A")
var1
var1_factor = factor(var1)
var1_factor                   # factor이기 때문에
# data와 level이 같이 출력
nlevels(var1_factor)          # factor의 level개수
# 4
levels(var1_factor)           # factor의 level 목록
# "A"  "AB"  "B"  "O"
is.factor(var1_factor)        # factor인지를 판단
ordered(var1)                 # 순서형 factor 생성
# level과 order 지정
# level에 지정이 안되면 NA로 처리
var1_factor = factor(var1,
levels = c("O","A","B"),
ordered = T)
var1_factor
var1_factor = factor(var1,
levels = c("O","A","B","AB"),
ordered = T)
var1_factor
levels(var1_factor) = c("A형","AB형","B형","O형")
levels(var1_factor)
var1_factor                  # 결과를 꼭 확인해보자
# list
var_scalar = 100                            # scalar
var_scalar
var_vector = c(10,20,30)                    # vector
var_matrix = matrix(1:4,nrow = 2,ncol = 2)  # matrix
var_matrix
var_array = array(1:8, dim=c(2,2,2))        # array
var_array
var_df = data.frame(id=1:3, age=c(10,15,20)) # data frame
var_df
var_factor = factor(c("A","B","C","A","B","A")) # factor
var_factor
my_list = list(var_scalar,
var_vector,
var_matrix,
var_array,
var_df,
var_factor)
my_list
my_list
no = c(1,2,3)
name = c("홍길동","최길동","김길동")
pay = c(250,150,300)
df = data.frame(NO=no,Name=name,Pay=pay)
df
# matrix를 이용한 data frame 생성
mat1 = matrix(data = c(1,"홍길동",150,
2,"최길동",150,
3,"김길동",300),
nrow = 3,
by=T)           # 행 우선
mat1
memp = data.frame(mat1)
memp
# 3개의 vector를 이용하여 data frame 생성
df = data.frame(x=c(1:5),
y=seq(2,10,2),
z=c("a","b","c","d","e"))
df
# data frame의 column을 참조하기 위해서는 $ 이용
df$x           # 1 2 3 4 5
df = data.frame(x=c(1:5),
y=seq(2,10,2),
z=c("a","b","c","d","e"))
str(df)
summary()
summary(df)
summary(df)
# subset() 함수의 사용
df = data.frame(x=c(1:5),
y=seq(2,10,2),
z=c("a","b","c","d","e"))
sub1 <- subset(df, x>=3)   # x가 3이상인 행 추출
sub1
sub2 <- subset(df, x>=3 & y<=8)
sub2
M=matrix(c(1:9),3,3,byrow=T)
N=matrix(c(1:9),3,3)
M=matrix(c(1:9),3,3,byrow=T)
M
N
M%*%N
test = data.frame(DepartmentID=c(31,33,34,35),
DepartmentName = c(영업부,기술부,사무부,마케팅))
test = data.frame(DepartmentID=c(31,33,34,35),
DepartmentName = c("영업부","기술부","사무부","마케팅"))
test
setwd("C:/Users/kyeon/OneDrive/바탕 화면/빅데이터/R/2.k-means")
library(caret)
set.seed(123)
inTrain
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
inTrain
training<-iris[inTrain,]
testing <-iris[-inTrain]
training
testing
testing <-iris[-inTrain,]
testing
training.data <- scale(training[-5])
summary(training.data)
training.data <- scale(training[-10])
training.data <- scale(training[-4])
training.data <- scale(training[-5])
training.data <- scale(training[1:4])
summary(training.data)
dim(training)
#모델 작성
iris.kmeans &lt;- kmeans(training.data[,-5], centers = 3, iter.max = 10000)
#모델 작성
iris.kmeans &lt;- kmeans(training.data[,-5], centers = 3, iter.max = 10000)
#모델 작성
kmeans(training.data[,-5], centers = 3, iter.max = 10000)
iris.kmeans$centers
centers
#모델 작성
iris.kmeans &lt;
#모델 작성
kmeans(training.data[,-5], centers = 2, iter.max = 10000)
#모델 작성
kmeans(training.data[,-5], centers = 4, iter.max = 10000)
#모델 작성
kmeans(training.data[,-5], centers = 4, iter.max = 20000)
#군집확인
training$cluster<-as.factor(iris.kmeans$cluster)
#군집확인
training$cluster<-as.factor(cluster)
iris.kmeans &lt;- kmeans(training.data[,-5], centers = 4, iter.max = 10000)
iris.kmeans <- kmeans(training.data[,-5], centers = 4, iter.max = 10000)
#군집확인
training$cluster<-as.factor(iris.kmeans$cluster)
qplot(Petal.Width,Petal.Length,colour=cluster,data=training)
iris.kmeans <- kmeans(training.data[,-5], centers = 3, iter.max = 10000)
#군집확인
training$cluster<-as.factor(iris.kmeans$cluster)
qplot(Petal.Width,Petal.Length,colour=cluster,data=training)
iris.kmeans$centers
table(training$Species, training$cluster)
summary(training.data)
#변수 표준화
training.mean <- mean(training[1:4])
#변수 표준화
training.mean <- mean(training[Sepal.Length])
#변수 표준화
training.mean <- mean(training['Sepal.Length'])
#변수 표준화
mean(training$Sepal.Length)
head(iris)
library(NbClust)
install.packages('NbClust')
library(NbClust)
nc <- NbClust(training.data, min.nc = 2, max.nc = 15, method = "kmeans")
iris.kmeans <- kmeans(training.data[,-5], centers = 2, iter.max = 10000)
iris.kmeans$centers
#군집확인
training$cluster<-as.factor(iris.kmeans$cluster)
qplot(Petal.Width,Petal.Length,colour=cluster,data=training)
#표로 결과 확인
table(training$Species, training$cluster)
iris.kmeans <- kmeans(training.data[,-5], centers = 3, iter.max = 10000)
source('C:/Users/kyeon/OneDrive/바탕 화면/빅데이터/R/2.k-means/k-means.R', encoding = 'EUC-KR', echo=TRUE)
iris.kmeans <- kmeans(training.data[,-5], centers = 3, iter.max = 10000)
iris.kmeans$centers
#군집확인
training$cluster<-as.factor(iris.kmeans$cluster)
qplot(Petal.Width,Petal.Length,colour=cluster,data=training)
#표로 결과 확인
table(training$Species, training$cluster)
#install.packages('NbClust')
library(NbClust)
nc <- NbClust(training.data, min.nc = 2, max.nc = 15, method = "kmeans")
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
set.seed(1712)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
inTrain
training<-iris[inTrain,]
testing <-iris[-inTrain,]
#변수 표준화
training.data <- scale(training[1:4])
summary(training.data)
iris.kmeans <- kmeans(training.data[,-5], centers = 3, iter.max = 10000)
iris.kmeans$centers
#군집확인
training$cluster<-as.factor(iris.kmeans$cluster)
qplot(Petal.Width,Petal.Length,colour=cluster,data=training)
#표로 결과 확인
table(training$Species, training$cluster)
nc <- NbClust(training.data, min.nc = 2, max.nc = 15, method = "kmeans")
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
wssplot <- function(data, nc = 15, seed = 1234) {
wss <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab = "Number of Clusters",
ylab = "Within groups sum of squares")}
wssplot(training.data)
