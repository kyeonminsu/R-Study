var2
var3 = seq(from=10, to=5, by=-2)
var3
var1 = rep(1:3, times=3) # times 생략 가능
var1                     # 1 2 3 1 2 3 1 2 3
var2 = rep(1:3, each=3)  # each는 각 원소가 반복할 횟수 지정
var2
var1 = rep(1:3, times=3) # times 생략 가능
var1                     # 1 2 3 1 2 3 1 2 3
var2 = rep(1:3, each=3)  # each는 각 원소가 반복할 횟수 지정
var2                     # 1 1 1 2 2 2 3 3 3
# vector간의 연산
var1 = 1:3
var2 = 4:6
var1                      # 1 2 3
var2                      # 4 5 6
var1 * 2                  # 2 4 6
var1 + 10                 # 11 12 13
var1 + var2               # 5 7 9
var3 = 1:6
var3
var1 + var3               # var1 : 1 2 3 1 2 3 (recycling rule)
# var3 : 1 2 3 4 5 6
# 2 4 6 5 7 9
var4 = 1:5
var4
var1 + var4               # var1 : 1 2 3 1 2 (recycling rule)
# var4 : 1 2 3 4 5
# 연산은 되지만 warning 발생
# 2 4 6 5 7
# matrix 생성
var1 = matrix(c(1:5))
var1
# nrow 속성을 이용해여 지정된 행을 가지는 matrix 생성
# 열 기준으로 데이터가 채워진다.
var2 = matrix(c(1:10), nrow=2)
var2
# nrow 속성 사용시 만약 행과 열의 수가 일치하지 않는 경우
var3 = matrix(c(1:13), nrow=3)
var3
# matrix 생성 시 행 우선으로 데이터를 생성하는 경우
var4 = matrix(c(1:10), nrow=2, byrow=T)
var4
# vector를 대상으로 rbind()는 행 묶음으로 matrix를 생성
# vector를 대상으로 cbind()는 열 묶음으로 matrix를 생성
var5 = c(1,2,3,4)
var6 = c(5,6,7,8)
mat1 = rbind(var5, var6)
mat1
mat2 = cbind(var5, var6)
mat2
# 데이터 타입과 데이터 구조 확인
mode(mat1)             # numeric
class(mat1)            # matrix
# matrix 생성
var1 = matrix(c(1:5))
var1
# nrow 속성을 이용해여 지정된 행을 가지는 matrix 생성
# 열 기준으로 데이터가 채워진다.
var2 = matrix(c(1:10), nrow=2)
var2
# nrow 속성 사용시 만약 행과 열의 수가 일치하지 않는 경우
var3 = matrix(c(1:13), nrow=3)
var3
# matrix 생성 시 행 우선으로 데이터를 생성하는 경우
var4 = matrix(c(1:10), nrow=2, byrow=T)
var4
# vector를 대상으로 rbind()는 행 묶음으로 matrix를 생성
# vector를 대상으로 cbind()는 열 묶음으로 matrix를 생성
var5 = c(1,2,3,4)
var6 = c(5,6,7,8)
mat1 = rbind(var5, var6)
mat1
mat2 = cbind(var5, var6)
mat2
# 데이터 타입과 데이터 구조 확인
mode(mat1)             # numeric
class(mat1)            # matrix
var1 = matrix(c(1:6), ncol=3)
var1
var2 = matrix(c(1,-1,2,-2,1,-1), ncol=3)
var2
var1*var2   # elementwise product(element단위의 곱연산)
t(var1)     # transpose matrix (전치행렬)
var3 = matrix(c(1,-1,2,-2,1,-1), ncol=2)
var3
var1 %*% var3   # matrix product (행렬곱)
# 역행렬 : matrix A가 nxn matrix일 때,
# 아래를 만족하는 nxn matrix B가 존재하면 B를 A의 역행렬이라 한다.
# AB = BA = I(단위행렬 E)
# 가우스 조던 소거법을 이용하여 계산.
var1 = matrix(c(1,2,3,3,0,1,5,4,2), ncol=3)
var1
solve(var1)     # matrix inversion (역행렬)
# factor 생성
var1 = c("A", "O", "AB", "B", "A", "O", "A")
var1
var1_factor = factor(var1)
var1_factor                   # factor이기 때문에
nlevels(var1_factor)          # factor의 level개수
# 4
levels(var1_factor)           # factor의 level 목록
# "A"  "AB"  "B"  "O"
is.factor(var1_factor)        # factor인지를 판단
ordered(var1)                 # 순서형 factor 생성
# level과 order 지정
# level에 지정이 안되면 NA로 처리
var1_factor = factor(var1,
levels = c("O","A","B"),
ordered = T)
var1_factor
var1_factor = factor(var1,
levels = c("O","A","B","AB"),
ordered = T)
var1_factor
levels(var1_factor) = c("A형","AB형","B형","O형")
levels(var1_factor)
var1_factor                  # 결과를 꼭 확인해보자
# factor 생성
var1 = c("A", "O", "AB", "B", "A", "O", "A")
var1
var1_factor = factor(var1)
var1_factor                   # factor이기 때문에
# data와 level이 같이 출력
nlevels(var1_factor)          # factor의 level개수
# 4
levels(var1_factor)           # factor의 level 목록
# "A"  "AB"  "B"  "O"
is.factor(var1_factor)        # factor인지를 판단
ordered(var1)                 # 순서형 factor 생성
# level과 order 지정
# level에 지정이 안되면 NA로 처리
var1_factor = factor(var1,
levels = c("O","A","B"),
ordered = T)
var1_factor
var1_factor = factor(var1,
levels = c("O","A","B","AB"),
ordered = T)
var1_factor
levels(var1_factor) = c("A형","AB형","B형","O형")
levels(var1_factor)
var1_factor                  # 결과를 꼭 확인해보자
# list
var_scalar = 100                            # scalar
var_scalar
var_vector = c(10,20,30)                    # vector
var_matrix = matrix(1:4,nrow = 2,ncol = 2)  # matrix
var_matrix
var_array = array(1:8, dim=c(2,2,2))        # array
var_array
var_df = data.frame(id=1:3, age=c(10,15,20)) # data frame
var_df
var_factor = factor(c("A","B","C","A","B","A")) # factor
var_factor
my_list = list(var_scalar,
var_vector,
var_matrix,
var_array,
var_df,
var_factor)
my_list
my_list
no = c(1,2,3)
name = c("홍길동","최길동","김길동")
pay = c(250,150,300)
df = data.frame(NO=no,Name=name,Pay=pay)
df
# matrix를 이용한 data frame 생성
mat1 = matrix(data = c(1,"홍길동",150,
2,"최길동",150,
3,"김길동",300),
nrow = 3,
by=T)           # 행 우선
mat1
memp = data.frame(mat1)
memp
# 3개의 vector를 이용하여 data frame 생성
df = data.frame(x=c(1:5),
y=seq(2,10,2),
z=c("a","b","c","d","e"))
df
# data frame의 column을 참조하기 위해서는 $ 이용
df$x           # 1 2 3 4 5
df = data.frame(x=c(1:5),
y=seq(2,10,2),
z=c("a","b","c","d","e"))
str(df)
summary()
summary(df)
summary(df)
# subset() 함수의 사용
df = data.frame(x=c(1:5),
y=seq(2,10,2),
z=c("a","b","c","d","e"))
sub1 <- subset(df, x>=3)   # x가 3이상인 행 추출
sub1
sub2 <- subset(df, x>=3 & y<=8)
sub2
M=matrix(c(1:9),3,3,byrow=T)
N=matrix(c(1:9),3,3)
M=matrix(c(1:9),3,3,byrow=T)
M
N
M%*%N
test = data.frame(DepartmentID=c(31,33,34,35),
DepartmentName = c(영업부,기술부,사무부,마케팅))
test = data.frame(DepartmentID=c(31,33,34,35),
DepartmentName = c("영업부","기술부","사무부","마케팅"))
test
#데이터 파악하기
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
mpg
head(mpg)
class(mpg)
class(mpg) #데이터프레임 출력
ls(mpg)
mpg
ls(mpg)
ls(mpg)
ls(mpg)
head(mpg)
tail(mpg)
View(mpg)
View(mpg)
dim(mpg)
dim(mpg)
nrow(mpg)
nrow(mpg)
ncol(mpg)
str(mpg)
str(mpg)
summary(mpg)
length(mpg)    # data frame인 경우 column의 개수
install.packages("hflights")
library(hflights)
rev(head(mpg)) # vector인 경우 원소의 순서를 역순으로, data frame인 경우 column을 역순으로
class(hflights)   # data frame
head(hflights)    # 상위 6행 출력
tail(hflights)    # 하위 6행 출력
dim(hflights)     # 행,열 (227496,21)
str(hflights)     # 변수의 속성확인
str(hflights)     # 변수의 속성확인
summary(hflights) # 요약 통계
ls(hflights)      # column명을 vector로 출력
nrow(hflights)    # 행의 개수
ncol(hflights)    # 열의 개수
length(hflights)  # 열의 개수
# matrix에 length()를 적용하면 열의 개수가 아니라
# 모든 원소의 개수를 리턴한다.
rev()             # vector인 경우 원소의 순서를 역순으로# data frame인 경우 column을 역순으로
# matrix에 length()를 적용하면 열의 개수가 아니라
# 모든 원소의 개수를 리턴한다.
rev(hflights)             # vector인 경우 원소의 순서를 역순으로# data frame인 경우 column을 역순으로
# matrix에 length()를 적용하면 열의 개수가 아니라
# 모든 원소의 개수를 리턴한다.
rev(head(hflights)             # vector인 경우 원소의 순서를 역순으로# data frame인 경우 column을 역순으로
# matrix에 length()를 적용하면 열의 개수가 아니라
# 모든 원소의 개수를 리턴한다.
rev(head(hflights))             # vector인 경우 원소의 순서를 역순으로# data frame인 경우 column을 역순으로
rev(head(mpg)) # vector인 경우 원소의 순서를 역순으로, data frame인 경우 column을 역순으로
# matrix에 length()를 적용하면 열의 개수가 아니라
# 모든 원소의 개수를 리턴한다.
rev(head(hflights))             # vector인 경우 원소의 순서를 역순으로# data frame인 경우 column을 역순으로
head(iris)
View(iris)
install.packages("plyr")
library(plyr)
x <- data.frame(id=c(1,2,3,4,6),
height=c(160,175,180,177,194))
y <- data.frame(id=c(5,4,1,3,2),
weight=c(55,73,80,94,77))
x
y
library(plyr)
x <- data.frame(id=c(1,2,3,4,6),
height=c(160,175,180,177,194))
y <- data.frame(id=c(5,4,1,3,2),
weight=c(55,73,80,94,77))
x
y
# join() : key값을 기준으로 두 개의 data frame을 하나로 병합
inner_df = join(x,y, by="id", type="inner")  # inner join
library(plyr)
x <- data.frame(id=c(1,2,3,4,6),
height=c(160,175,180,177,194))
y <- data.frame(id=c(5,4,1,3,2),
weight=c(55,73,80,94,77))
# join() : key값을 기준으로 두 개의 data frame을 하나로 병합
inner_df = join(x,y, by="id", type="inner")  # inner join
inner_df
x
y
inner_df
left_df = join(x,y, by="id", type="left") # left join
left_df
x
y
right_df = join(x,y, by="id", type="right") # right join
right_df
x
left_df
right_df
full_df = join(x,y, by="id", type="full") # full join
full_df
x <- data.frame(id=c(1,2,3,4,6),
gender=c("M","F","M","F","M"),
height=c(160,175,180,177,194))
x <- data.frame(id=c(1,2,3,4,6),
gender=c("M","F","M","F","M"),
height=c(160,175,180,177,194))
y <- data.frame(id=c(5,4,1,3,2),
gender=c("M","F","M","F","M"),
weight=c(55,73,80,94,77))
x
y
df <- join(x,y, by=c("id","gender"), type="inner")
df
inner_df
# 2. 그룹별 기술 통계량 구하기
# tapply() : 집단별 통계치를 구해주며 한번에 1개의 통계치만 구할 수 있다.
str(iris)
unique(iris$Species)
result = tapply(iris$Sepal.Length, iris$Species, FUN=mean)
result
result = tapply(iris$Sepal.Length, iris$Species, FUN=sd)
result
# ddply() : 한번에 여러개의 통계치를 구할 수 있다.
result = ddply(iris,
.(Species),
summarise,
avg=round(mean(Sepal.Length),2),
sd=round(sd(Sepal.Length),2),
max=max(Sepal.Length))
result
View(result)
library(plyr)
x <- data.frame(id=c(1,2,3,4,6),
height=c(160,175,180,177,194))
y <- data.frame(id=c(5,4,1,3,2),
weight=c(55,73,80,94,77))
x
y
# join() : key값을 기준으로 두 개의 data frame을 하나로 병합
inner_df = join(x,y, by="id", type="inner")  # inner join
inner_df
left_df = join(x,y, by="id", type="left") # left join
left_df
left_df = join(x,y, by="id", type="left") # left join
left_df
left_df = join(x,y, by="id", type="left") # left join
left_df
right_df = join(x,y, by="id", type="right") # right join
right_df
full_df = join(x,y, by="id", type="full"? # full join
full_df = join(x,y, by="id", type="full") # full join
full_df
# 2. 그룹별 기술 통계량 구하기
# tapply() : 집단별 통계치를 구해주며 한번에 1개의 통계치만 구할 수 있다.
str(iris)
result = tapply(iris$Sepal.Length, iris$Species, FUN=mean) #평균
result
result = tapply(iris$Sepal.Length, iris$Species, FUN=sd) # 표준편차
result
# ddply() : 한번에 여러개의 통계치를 구할 수 있다.
result = ddply(iris,
.(Species),
summarise,
avg=round(mean(Sepal.Length),2),
sd=round(sd(Sepal.Length),2),
max=max(Sepal.Length))
result
setwd("C:/Users/kyeon/OneDrive/바탕 화면/빅데이터/R/2.기본함수")
install.packages("reshape2")
library(reshape2)
df = airquality
df
class(df)
str(df)     # 153행 6열
df
# melt()의 기본은 기준이 될 열을 지정하지 않으면
# numeric data type의 모든 열을 행으로 변환
melt(df)
melt(df, na.rm = T)         # value값이 NA인 것은 제외
nrow(melt(df))              # 생성된 총 row수 : 153 * 6 = 918
# month를 기준으로 데이터를 행으로 변환
melt(df,id.vars="Month")
nrow(melt(df,id.vars="Month"))  # 생성된 총 row수 : 153 * 5 = 765
# month와 day를 기준으로 데이터를 행으로 변환
melt(df,id.vars=c("Month","Day"))
nrow(melt(df,id.vars=c("Month","Day")))
# month와 day를 기준으로 ozone데이터만 행으로 변환
melt(df,id.vars=c("Month","Day"),measure.vars="Ozone")
# melt()의 기본은 기준이 될 열을 지정하지 않으면
# numeric data type의 모든 열을 행으로 변환
melt(df)
melt(df, na.rm = T)         # value값이 NA인 것은 제외
nrow(melt(df))              # 생성된 총 row수 : 153 * 6 = 918
nrow(melt(df))              # 생성된 총 row수 : 153 * 6 = 918
# month를 기준으로 데이터를 행으로 변환
melt(df,id.vars="Month")
nrow(melt(df,id.vars="Month"))  # 생성된 총 row수 : 153 * 5 = 765
nrow(melt(df,id.vars="Month"))  # 생성된 총 row수 : 153 * 5 = 765
# month와 day를 기준으로 데이터를 행으로 변환
melt(df,id.vars=c("Month","Day"))
nrow(melt(df,id.vars=c("Month","Day")))  # 생성된 총 row수 : 153 * 4 = 612
nrow(melt(df,id.vars=c("Month","Day")))  # 생성된 총 row수 : 153 * 4 = 612
# month와 day를 기준으로 ozone데이터만 행으로 변환
melt(df,id.vars=c("Month","Day"),measure.vars="Ozone")
library(reshape2)
df = airquality;
df
melt_df <- melt(df,id.vars=c("Month","Day"));
head(melt_df)
head(melt_df)
# Month를 기준으로 각 값들의 mean
dcast_df <- dcast(melt_df,
formula=Month ~ variable,
fun=mean,
na.rm=T)
dcast_df
# 모든 column 원상 복구
dcast_df <- dcast(melt_df,formula=Month + Day ~ ...)
dcast_df
# smiths data set을 이용하여 melt를 실습해보자
pirnt('배고프다')
# smiths data set을 이용하여 melt를 실습해보자
print('배고프다')
# smiths data set을 이용하여 melt를 실습해보자
smiths
melt_smiths <- melt(smiths, id.vars=c("subject"))
melt_smiths
# smiths data set을 이용하여 melt를 실습해보자
head(smiths)
melt_smiths <- melt(smiths, id.vars=c("subject","time"))
melt_smiths
melt_smiths <- melt(smiths, id.vars=c("subject","time","age"))
melt_smiths   # 4행
melt_smiths <- melt(smiths,
id.vars=c("subject","time","age"),
na.rm = T)
melt_smiths
# 다른 데이터 셋으로 실습
library(ggplot2)
library(reshape2)
library(dplyr)
mpg
df <- as.data.frame(mpg)
melt(df)
melt(df, id.vars="model")
melt(df, id.vars=c("manufacturer","model"),
measure.vars="cty")
#### mpg 데이터 셋 사용
df <- as.data.frame(mpg)
melt_df <- melt(df, id.vars=c("manufacturer","model"),
measure.vars="cty")
melt_df;
dcast_df <- dcast(melt_df,
formula=manufacturer ~ variable,
fun=mean)
dcast_df
df <- as.data.frame(mpg)
df %>% group_by(manufacturer) %>%
summarise(avg_cty=mean(cty))
melt_sample_mpg
library(ggplot)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot)
library(ggplot2)
library(dplyr)
df = as.data.frame(mgp)
df = as.data.frame(mpg)
View(df)
help(df)
# 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려 한다.
# displ(배기량)이 4 이하인 자동차와 4 초과인 자동차 중
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
result <- filter(df, displ<=4)
result
# 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려 한다.
# displ(배기량)이 4 이하인 자동차와 4 초과인 자동차 중
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
result <- mean(hwy) %>% filter(df, displ<=4)
# 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려 한다.
# displ(배기량)이 4 이하인 자동차와 4 초과인 자동차 중
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
result <- mean(df$hwy) %>% filter(df, displ<=4)
# 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려 한다.
# displ(배기량)이 4 이하인 자동차와 4 초과인 자동차 중
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
result <- df$hwy %>% filter(df, displ<=4)
# 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려 한다.
# displ(배기량)이 4 이하인 자동차와 4 초과인 자동차 중
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
result <- df$hwy(mean) %>% filter(df, displ<=4)
# 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려 한다.
# displ(배기량)이 4 이하인 자동차와 4 초과인 자동차 중
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
result <- select(df,hwy) %>% filter(displ<=4)
# 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려 한다.
# displ(배기량)이 4 이하인 자동차와 4 초과인 자동차 중
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
result <- select(df,hwy) %>% filter(df,displ<=4)
# 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려 한다.
# displ(배기량)이 4 이하인 자동차와 4 초과인 자동차 중
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
result <-  filter(df,displ<=4)%>%select(hwy)
result
mean(result)
result.mean
