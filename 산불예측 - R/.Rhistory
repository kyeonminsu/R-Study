score=c(20,30,NA,50,67,NA),
gender=c("^^","F","M","F","M","M"),
stringsAsFactors = F)
df
str(df)
table(df$gender)
df <- data.frame(id=c(1,2,NA,4,NA,6),
score=c(20,30,NA,50,67,NA),
gender=c("^^","F","M","F","M","M"),
stringsAsFactors = F)
df
str(df)
table(df$gender)
df$gender = ifelse(df$gender %in% c("M","F"),
df$gender,
NA)
table(df$gender)
df
# 극단치를 확인하기 위한 sample code
data = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,22.1)
summary(data)
# IQR(데이터 중간 위쪽의 mid point - 중간 아래쪽의 mid point)
median_value = summary(data)[3]; median_value
median_value
lower_data = c(1,2,3,4,5,6,7,8)
upper_data = c(8,9,10,11,12,13,14,22.1)
mid_lower = median(lower_data);
mid_lower
mid_upper = median(upper_data);
mid_upper
IQR_value = mid_upper - mid_lower;
IQR_value
# 기준치 => IQR * 1.5
deter_value = IQR_value * 1.5
# 3사분위 값 + 기준치 => summary(data)[5] + deter_value
outlier_value = summary(data)[5] + deter_value;
outlier_value
# 기준치 => IQR * 1.5
deter_value = IQR_value * 1.5
deter_value
# 3사분위 값 + 기준치 => summary(data)[5] + deter_value
outlier_value = summary(data)[5] + deter_value;
outlier_value
boxplot(data)
# mpg data를 이용한 극단치 처리
library(ggplot2)
mpg
class(mpg)
mpg <- as.data.frame(mpg)
class(mpg)
boxplot(mpg$hwy)
boxplot(data)
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
# mpg data를 이용한 극단치 처리
library(ggplot2)
mpg
boxplot(mpg$hwy)$stats
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37,
NA,
mpg$hwy)
table(is.na(mpg$hwy))
table(is.na(mpg$hwy))
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37,
NA,
mpg$hwy)
table(is.na(mpg$hwy))
result <- mpg %>%
group_by(drv) %>%
summarise(hwy_mean=mean(hwy, na.rm=T))
result
#iris데이터 셋을 사용한다.
colnames(iris) #컬럼들을 확인한다.
levels(iris$Species) #Species 컬럼에 몇개의 종류가 있는지 확인한다.
library(rpart) #rpart()함수 포함 패키지
library(rpart.plot) #rpart.plot()함수 포함패키지
install.packages("rpart.plot")
library(rpart.plot) #rpart.plot()함수 포함패키지
train <- sample(1:150, 100) #무작위로 100개 추출 (학습데이터)
help(rpart)
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length +
Petal.Width, data=iris, subset =train, method = "class")
rpart.plot(tree)
summary(tree)
#가지치기
printcp(tree)
pruned_tree <- prune(tree, cp = 0.1) #cp =0.1로 가지치기
rpart.plot(pruned_tree)
#학습된 의사결정나무모델로 Test셋 예측
predict(pruned_tree, iris[-train,], type = "class")
#정오분류표(confusion matrix) 작성
tt <- table(iris$Species[-train], predict(pruned_tree, iris[-train,], type = "class"))
tt
#정분류율 및 오불류율 계산
sum(tt[row(tt) == col(tt)])/sum(tt) #정분류율
1-sum(tt[row(tt) == col(tt)])/sum(tt) #오분류율
#정오분류표 그래프화
test <- iris[-train,] #Test셋 따로 뽑기
test$pred <- predict(pruned_tree, iris[-train,], type = "class")  #Test셋에 대한 예측분류
library(ggplot2)
ggplot(test, aes(Species, pred, color = Species)) +
+   geom_jitter(width = 0.2, height = 0.1, size=2) +
+   labs(title="Confusion Matrix",
+        subtitle="Predicted vs. Observed from Iris dataset",
+        y="Predicted",
+        x="Truth")
labs(title="Confusion Matrix",
subtitle="Predicted vs. Observed from Iris dataset",
y="Predicted",
x="Truth")
ggplot(test, aes(Species, pred, color = Species))
ggplot(test, aes(Species, pred, color = Species))+
geom_jitter(width = 0.2, height = 0.1, size=2)
ggplot(test, aes(Species, pred, color = Species))+
geom_jitter(width = 0.2, height = 0.1, size=2)+
labs(title="Confusion Matrix",
subtitle="Predicted vs. Observed from Iris dataset",
y="Predicted",
x="Truth")
#C50 패키지를 사용하여 의사결정나무를 구축
install.packages("C50")
ls()
rm()
ls()
#C50 패키지를 사용하여 의사결정나무를 구축
rm(list = ls())
library(C50)
class(iris)
str(iris) #구조를 확인
nrow(iris)
####### Train, Test 80%, 20%로 나눈다.
sample(1:nrow(iris), siez=nro)
####### Train, Test 80%, 20%로 나눈다.
sample(1:nrow(iris), siez=nrow(iris)*0.8)
####### Train, Test 80%, 20%로 나눈다.
sample(1:nrow(iris), size=nrow(iris)*0.8)
####### Train, Test 80%, 20%로 나눈다.
sample(1:nrow(iris), size=nrow(iris)*0.8)
####### Train, Test 80%, 20%로 나눈다.
idx <- sample(1:nrow(iris), size=nrow(iris)*0.8)
idx
####### Train, Test 80%, 20%로 나눈다.
set.seed(2021)
idx <- sample(1:nrow(iris), size=nrow(iris)*0.8)
idx
class(idx)
length(idx)
D.train<-iris[idx, ]
D.train
nrow(D.train)
D.test<-iris[-idx, ]
nrow(D.test)
############# c5.0 모델 구축
model<-C5.0(Species~., data = D.train)  #. or 이란 뜻이다.
summary(model)
####### Train, Test 80%, 20%로 나눈다.
set.seed(2020)
idx <- sample(1:nrow(iris), size=nrow(iris)*0.8)
idx
class(idx)
length(idx)
D.train<-iris[idx, ]
D.train
nrow(D.train)
D.test<-iris[-idx, ]
D.test
nrow(D.test)
############# c5.0 모델 구축
model<-C5.0(Species~., data = D.train)  #. or 이란 뜻이다.
summary(model)
plot(model)
predict(object=model, newdata = D.test)
D.test$Species
result<-predict(object=model, newdata = D.test)
D.test$Species
result
table(D.test$Species, result) # 오른쪽이 정답, 왼쪽이 예측한 결과
Confusion_Matrix<-table(D.test$Species, result) # 오른쪽이 정답, 왼쪽이 예측한 결과
Accuracy<-diag(Confusion_Matrix)
Accuracy<-sum(diag(Confusion_Matrix))/sum(Confusion_Matrix)
Accuracy
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
rm(list = ls())
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
class
class(df)
str(df)
str(df)
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
rm(list = ls())
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
df
str(df)
head(df)
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
df<-read.csv('http://www.sample-videos.com/csv/Sample-Spreadsheet-10-rows.csv')
str(df)
df
rm(list = ls())
library(xlsx)
df <- read.xlsx(file.choose(),
sheetIndex = 1,
encoding = "UTF-8")
library("moments")
skewness(df$math)     # 왜도
kurtosis(df$math)  # 첨도
install.packages("psych")  # psychometrics(심리측정학)
library(psych)
describe(df)
df <- read.xlsx(file.choose(),
sheetIndex = 1,
encoding = "UTF-8")
library(xlsx)
df <- read.xlsx(file.choose(),
sheetIndex = 1,
encoding = "UTF-8")
describe(df)
library(psych)
describe(df)
# Package for Analysis of Space-Time Ecological Series
install.packages("pastecs")
library(pastecs)
stat.desc(df)
install.packages("descr")
library(descr)
freq(df$SEX, plot = T)
freq(df$math, plot = T)
library(descr)
freq(df$math, plot = T)
freq(df$class, plot = T)
library(descr)
freq(df$math, plot = T)
#install.packages("ggplot2")
library(ggplot2)
df <- as.data.frame(mpg)
ggplot(data=df,
aes(x=displ, y=hwy))    # 배경 생성
ggplot(data=df,
aes(x=displ, y=hwy)) +
geom_point()      # 산점도 추가
ggplot(data=df,
aes(x=displ, y=hwy)) +
geom_point() +
xlim(3,6) +
ylim(10,30)
ggplot(data=df,
aes(x=displ, y=hwy)) +
geom_point(size=3, color="red")      # 산점도 추가
plot.new()   # 작성한 그래프를 지울 때 사용
# 1. 집단별 평균표로 구성된 data frame 생성
library(ggplot2)
library(dplyr)
df <- as.data.frame(mpg)
head(df)
result <- df %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
result     # 구동방식별 고속도로 평균 연비
ggplot(data=result,
aes(x=drv, y=mean_hwy)) +
geom_col(width=0.3)
ggplot(data=result,
aes(x=reorder(drv, -mean_hwy), y=mean_hwy)) +
geom_col()
ggplot(data = df,
aes(x=drv)) +
geom_bar(width=0.5)
ggplot(data = df,
aes(x=drv)) +
geom_bar(aes(fill=factor(cyl)),width=0.5)
ggplot(data = df,
aes(x=drv)) +
geom_histogram()
head(df)
ggplot(data = df,
aes(x=hwy)) +
geom_histogram()
# 히스토그램의 bin의 값을 설정하지 않아서 30으로 설정
# 만약 bin값을 다시 설정하려면 다음과 같이 설정(비율지정)
ggplot(data = df,
aes(x=hwy)) +
geom_histogram(binwidth = 1)
ggplot(data = df,
aes(x=hwy)) +
geom_histogram()
# 히스토그램의 bin의 값을 설정하지 않아서 30으로 설정
# 만약 bin값을 다시 설정하려면 다음과 같이 설정(비율지정)
ggplot(data = df,
aes(x=hwy)) +
geom_histogram(binwidth = 1)
result     # 구동방식별 고속도로 평균 연비
ggplot(data=result,
aes(x=drv, y=mean_hwy)) +
geom_col(width=0.3)
ggplot(data=result,
aes(x=reorder(drv, -mean_hwy), y=mean_hwy)) +
geom_col()
ggplot(data = df,
aes(x=drv)) +
geom_bar(width=0.5)
ggplot(data = df,
aes(x=drv)) +
geom_bar(aes(fill=factor(cyl)),width=0.5)
rm(ls())
rm(list = ls())
# 사용 data set
economics
economics_long
help(economics)
# 시간에 따른 실업자수 추이를 생성해보자
ggplot(data=economics,
aes(x=date, y=unemploy)) +
geom_line()
ggplot(data=economics,
aes(x=date, y=unemploy)) +
geom_point(color = "red") +
geom_line()
library(ggplot2)
library(dplyr)
df <- as.data.frame(mpg)
ggplot(data=df,
aes(x=drv, y=hwy)) +
geom_boxplot()
df <- economics
head(df)
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_line()
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_line() +
geom_abline(intercept=12.1, slope=-0.0003444)
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_line() +
geom_hline(yintercept=mean(df$psavert))
tmp <-
df %>% filter(psavert == min(psavert)) %>%
select(date)
tmp <- as.data.frame(tmp)$date
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_line() +
geom_vline(xintercept = tmp)
tmp <- as.data.frame(tmp)
tmp
tmp <- as.data.frame(tmp)$date
tmp <- as.data.frame(tmp)$date
tmp <-
df %>% filter(psavert == min(psavert)) %>%
select(date)
tmp <- as.data.frame(tmp)$date
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_line() +
geom_vline(xintercept = tmp)
## 만약 날짜를 직접입력하려면??
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_line() +
geom_vline(xintercept = as.Date("2009-10-01"))
# geom_text(aes(label="라벨명", vjust=세로위치, hjust=가로위치)
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),
as.Date("1992-12-01")) +
ylim(7,10) +
geom_text(aes(label=psavert, vjust=0, hjust=-0.5))
# annotate("모양",
#          xmin=x축시작,
#          xmax=x축 끝,
#          ymin=y축 시작,
#          ymax=y축 끝)
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),
as.Date("1992-12-01")) +
ylim(7,10) +
annotate("rect",
xmin=as.Date("1991-01-01"),
xmax=as.Date("1991-12-31"),
ymin=8,
ymax=9,
alpha=0.3,
fill="red")
# geom_text(aes(label="라벨명", vjust=세로위치, hjust=가로위치)
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),
as.Date("1992-12-01")) +
ylim(7,10) +
geom_text(aes(label=psavert, vjust=0, hjust=-0.5))
# annotate("모양",
#          xmin=x축시작,
#          xmax=x축 끝,
#          ymin=y축 시작,
#          ymax=y축 끝)
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),
as.Date("1992-12-01")) +
ylim(7,10) +
annotate("rect",
xmin=as.Date("1991-01-01"),
xmax=as.Date("1991-12-31"),
ymin=8,
ymax=9,
alpha=0.3,
fill="red")
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),
as.Date("1992-12-01")) +
ylim(7,10) +
annotate("rect",
xmin=as.Date("1991-01-01"),
xmax=as.Date("1991-12-31"),
ymin=8,
ymax=9,
alpha=0.3,
fill="red") +
annotate("segment",
x = as.Date("1990-05-01"),
xend=as.Date("1991-05-01"),
y = 7.5,
yend=8.5,
color="blue",
arrow=arrow()) +
annotate("text",
x=as.Date("1991-05-01"),
y=8.5,
label="글자도 쓸수 있어요!!")
# labs(x=x축 이름, y=y축 이름, title=그래프 제목)
ggplot(data=df,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),
as.Date("1992-12-01")) +
ylim(7,10) +
labs(x="연도", y="개인저축률", title="날짜별 개인 저축률") +
theme_classic()
df <- read.csv(file.choose(),
sheetIndex = 1,
encoding = "UTF-8")
df <- read.csv(file.choose(),
encoding = "UTF-8")
df
class(df)
str(df)
#nrow로 행의 갯수를 세고, 이를통해 랜덤한 숫자를 추출하고, 이를 바탕으로 랭킹을 매겨본뒤,
#다시한번 무작위로 뒤섞인 데이터를 저장하는 과정입니다.
#이렇게 랜덤하게 섞는 방법을 이용하면, 샘플링할때도 단순하게 위에서 몇개는 훈련용, 그 나머지는 테스트용으로 간단하게 나눠볼수 있습니다.
df <- df[order(runif(nrow(df))),]
index <- sample(1:nrow(df), nrow(df) * 0.7, replace = F)
train <- df[index,]
train <- df[-index,]
train <- df[index,]
test <- df[-index,]
#C5.0으로 모델 만들기
library(C50)
credit_model <- C5.0(within(train, rm(default)), train$default)
credit_train$default<-as.factor(credit_train$default)
credit_train$default<-as.factor(train$default)
train$default<-as.factor(train$default)
credit_model <- C5.0(within(train, rm(default)), train$default)
table(test$default,predict(credit_model,newdata=test))
result=predict(credit_model,newdata=test)
result<-predict(credit_model,newdata=test)
Confusion_Matrix<-table(test$default, result) # 오른쪽이 정답, 왼쪽이 예측한 결과
Accuracy<-sum(diag(Confusion_Matrix))/sum(Confusion_Matrix)
Accuracy
mm <- ctree(default ~ . , data = train)
mm <- tree(default ~ . , data = train)
mm <- rpart(default ~ . , data = train)
#rpart 패키지 이용하기.
library(party)
#rpart 패키지 이용하기.
library(rpart)
mm <- rpart(default ~ . , data = train)
plot(mm)
rpart.plot(mm)
library(rpart.plot)
rpart.plot(mm)
result2<-predict(credit_model,newdata=test)
Confusion_Matrix<-table(test$default, result2) # 오른쪽이 정답, 왼쪽이 예측한 결과
Accuracy<-sum(diag(Confusion_Matrix))/sum(Confusion_Matrix)
Accuracy
setwd("C:/Users/kyeon/OneDrive/바탕 화면/BigData/Fires")
library(ggplot2)# 시각화 함수
#csv파일을 불러온다.
df=read.csv("forestfires.csv")
#DMC
a<-ggplot(df, aes(x=DMC))+
geom_histogram(binwidth=2, fill="blue",colour = "black")+
ggtitle("DMC")+
theme(plot.title = element_text(hjust = 0.5))
b<-ggplot(df, aes(x=DMC)) +   #커널 밀도 곡선
geom_density(fill = "blue", colour=NA, alpha=.5) +# alpha 반투명
geom_line(stat="density") +
expand_limits(y=0) +
ggtitle("DMC")+
theme(plot.title = element_text(hjust = 0.5))
test<-grid.arrange(a,b, nrow=1, ncol=2)
library(gridExtra) # 그래프 그리드
test<-grid.arrange(a,b, nrow=1, ncol=2)
